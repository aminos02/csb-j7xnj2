{"version":3,"sources":["app/Navbar.js","features/posts/postsSlice.js","features/posts/AddPostForm.js","features/posts/EditPost.js","features/posts/PostAuthor.js","features/posts/ReactionButtons.js","features/posts/TimeAgo.js","features/posts/PostsList.js","features/posts/SinglePost.js","App.js","api/server.js","features/users/usersSlice.js","app/store.js","index.js"],"names":["Navbar","className","to","initialState","id","title","content","date","sub","Date","minutes","toISOString","user","reactions","thumbsUp","hooray","heart","rocket","eyes","postsSlice","createSlice","name","reducers","addPost","reducer","state","action","push","payload","prepare","userId","nanoid","reactionAdded","postId","reaction","existingPost","find","post","updatePost","index","findIndex","actions","AddPostForm","useState","setTitle","setContent","setUserId","users","useSelector","dispatch","useDispatch","onChange","e","target","value","map","style","marginBottom","placeholder","disabled","type","onClick","EditPost","match","history","useHistory","postid","params","posts","PostAuthor","author","reactionEmoji","ReactionButtons","reactionButtons","Object","entries","emoji","TimeAgo","timestamp","timeAgo","parseISO","timePeriod","formatDistanceToNow","PostsList","renderedPosts","slice","sort","a","b","localeCompare","substring","marginLeft","SinglePostPage","App","seedDate","exact","path","render","Fragment","component","usersSlice","configureStore","postsReducer","usersReducer","ARTIFICIAL_DELAY_MS","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","setItem","setRandom","faker","seed","getTime","randomFromArray","array","length","db","factory","primaryKey","firstName","String","lastName","username","manyOf","oneOf","comments","comment","text","Number","createUserData","internet","userName","i","create","j","newPost","lorem","words","recent","paragraphs","serializePost","handlers","rest","get","req","res","ctx","getAll","delay","json","data","body","status","findFirst","where","equals","patch","updatedPost","update","notifications","generateRandomNotifications","undefined","worker","setupWorker","socketServer","MockSocketServer","sendRandomNotifications","socket","since","obj","send","JSON","stringify","sendMessage","on","message","parse","notificationTemplates","numNotifications","pastDate","now","valueOf","setMinutes","getMinutes","Array","template","between","start","onUnhandledRequest","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.b9f12d31.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const Navbar = () => {\n  return (\n    <nav>\n      <section>\n        <h1>Redux Advanced Example</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\">\n            <Link to=\"/\">Posts</Link>\n          </div>\n        </div>\n      </section>\n    </nav>\n  );\n};\n","import { createSlice, nanoid } from \"@reduxjs/toolkit\";\r\nimport { sub } from \"date-fns\";\r\n\r\nconst initialState = [\r\n  {\r\n    id: \"0\",\r\n    title: \"Post 1\", // omitted fields\r\n    content: \"Hello!\",\r\n    date: sub(new Date(), { minutes: 10 }).toISOString(),\r\n    user: \"0\",\r\n    reactions: { thumbsUp: 1, hooray: 0, heart: 0, rocket: 0, eyes: 0 }\r\n  },\r\n  {\r\n    id: \"1\",\r\n    title: \"Post 2\",\r\n    content: \"More text\",\r\n    date: sub(new Date(), { minutes: 5 }).toISOString(),\r\n    user: \"1\",\r\n    reactions: { thumbsUp: 3, hooray: 0, heart: 0, rocket: 0, eyes: 0 }\r\n  }\r\n];\r\n\r\nconst postsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState,\r\n  reducers: {\r\n    addPost: {\r\n      reducer(state, action) {\r\n        state.push(action.payload);\r\n      },\r\n      prepare(title, content, userId) {\r\n        return {\r\n          payload: {\r\n            id: nanoid(),\r\n            date: new Date().toISOString(),\r\n            title,\r\n            content,\r\n            user: userId,\r\n            reactions: { thumbsUp: 0, hooray: 0, heart: 0, rocket: 0, eyes: 0 }\r\n          }\r\n        };\r\n      }\r\n    },\r\n    reactionAdded(state, action) {\r\n      const { postId, reaction } = action.payload;\r\n      const existingPost = state.find((post) => post.id === postId);\r\n      if (existingPost) {\r\n        existingPost.reactions[reaction]++;\r\n      }\r\n    },\r\n    updatePost(state, action) {\r\n      let index = state.findIndex((post) => post.id === action.payload.id);\r\n      state[index] = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { addPost, updatePost, reactionAdded } = postsSlice.actions;\r\n\r\nexport default postsSlice.reducer;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addPost } from \"./postsSlice\";\r\n\r\nexport const AddPostForm = () => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [userId, setUserId] = useState(\"\");\r\n\r\n  const users = useSelector((state) => state.users);\r\n\r\n  const onTitleChanged = (e) => setTitle(e.target.value);\r\n  const onContentChanged = (e) => setContent(e.target.value);\r\n  const onAuthorChanged = (e) => setUserId(e.target.value);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <section>\r\n      <h2>Add a New Post</h2>\r\n      <form>\r\n        <label>\r\n          Author:\r\n          <select onChange={onAuthorChanged}>\r\n            <option value=\"\"></option>\r\n            {users.map((user) => (\r\n              <option key={user.id} value={user.id}>\r\n                {user.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <label>\r\n          <p style={{ marginBottom: 0 }}>Post Title:</p>\r\n          <input placeholder=\"\" value={title} onChange={onTitleChanged} />\r\n        </label>\r\n        <label>\r\n          Content:\r\n          <textarea\r\n            placeholder=\"\"\r\n            value={content}\r\n            onChange={onContentChanged}\r\n          />\r\n        </label>\r\n        <button\r\n          disabled={!(title && content && userId)}\r\n          type=\"button\"\r\n          onClick={() => {\r\n            if (title && content) dispatch(addPost(title, content, userId));\r\n            setTitle(\"\");\r\n            setContent(\"\");\r\n          }}\r\n        >\r\n          Save Post{\" \"}\r\n        </button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updatePost } from \"./postsSlice\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const EditPost = ({ match }) => {\r\n  const history = useHistory();\r\n\r\n  const { postid } = match.params;\r\n  const post = useSelector((state) =>\r\n    state.posts.find((post) => post.id === postid)\r\n  );\r\n\r\n  const [title, setTitle] = useState(post.title);\r\n  const [content, setContent] = useState(post.content);\r\n\r\n  const onTitleChanged = (e) => setTitle(e.target.value);\r\n  const onContentChanged = (e) => setContent(e.target.value);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <section>\r\n      <h2>Edit Post</h2>\r\n      <form>\r\n        <label>\r\n          <p style={{ marginBottom: 0 }}>Post Title:</p>\r\n          <input placeholder=\"\" value={title} onChange={onTitleChanged} />\r\n        </label>\r\n        <label>\r\n          Content:\r\n          <textarea\r\n            placeholder=\"\"\r\n            value={content}\r\n            onChange={onContentChanged}\r\n          />\r\n        </label>\r\n        <button\r\n          disabled={!(title && content)}\r\n          type=\"button\"\r\n          onClick={() => {\r\n            if (title && content)\r\n              dispatch(updatePost({ id: post.id, title, content }));\r\n            setTitle(\"\");\r\n            setContent(\"\");\r\n            history.push(`/posts/${post.id}`);\r\n          }}\r\n        >\r\n          Update Post\r\n        </button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport const PostAuthor = ({ userId }) => {\r\n  const author = useSelector((state) =>\r\n    state.users.find((user) => user.id === userId)\r\n  );\r\n\r\n  return <span>by {author ? author.name : \"Unknown author\"}</span>;\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { reactionAdded } from \"./postsSlice\";\r\n\r\nconst reactionEmoji = {\r\n  thumbsUp: \"👍\",\r\n  hooray: \"🎉\",\r\n  heart: \"❤️\",\r\n  rocket: \"🚀\",\r\n  eyes: \"👀\"\r\n};\r\nexport const ReactionButtons = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => {\r\n    return (\r\n      <button\r\n        onClick={() =>\r\n          dispatch(reactionAdded({ postId: post.id, reaction: name }))\r\n        }\r\n        key={name}\r\n        type=\"button\"\r\n        className=\"muted-button reaction-button\"\r\n      >\r\n        {emoji} {post.reactions[name]}\r\n      </button>\r\n    );\r\n  });\r\n\r\n  return <div>{reactionButtons}</div>;\r\n};\r\n","import React from \"react\";\r\nimport { parseISO, formatDistanceToNow } from \"date-fns\";\r\n\r\nexport const TimeAgo = ({ timestamp }) => {\r\n  let timeAgo = \"\";\r\n  if (timestamp) {\r\n    const date = parseISO(timestamp);\r\n    const timePeriod = formatDistanceToNow(date);\r\n    timeAgo = `${timePeriod} ago`;\r\n  }\r\n\r\n  return (\r\n    <span title={timestamp}>\r\n      &nbsp; <i>{timeAgo}</i>\r\n    </span>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { PostAuthor } from \"./PostAuthor\";\r\nimport { ReactionButtons } from \"./ReactionButtons\";\r\nimport { TimeAgo } from \"./TimeAgo\";\r\n\r\nexport const PostsList = () => {\r\n  const posts = useSelector((state) => state.posts);\r\n\r\n  const orderedPosts = posts\r\n    .slice()\r\n    .sort((a, b) => b.date.localeCompare(a.date));\r\n\r\n  const renderedPosts = orderedPosts.map((post) => (\r\n    <article className=\"post-excerpt\" key={post.id}>\r\n      <h3>{post.title}</h3>\r\n      <div>\r\n        <PostAuthor userId={post.user} />\r\n        <TimeAgo timestamp={post.date} />\r\n      </div>\r\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\r\n      {post.reactions ? <ReactionButtons post={post} /> : null}\r\n      <Link to={`/posts/${post.id}`} className=\"button muted-button\">\r\n        View Post\r\n      </Link>\r\n      <Link\r\n        to={`/editPost/${post.id}`}\r\n        className=\"button muted-button\"\r\n        style={{ marginLeft: 50 }}\r\n      >\r\n        Edit post\r\n      </Link>\r\n    </article>\r\n  ));\r\n\r\n  return (\r\n    <section className=\"posts-list\">\r\n      <h2>Posts</h2>\r\n      {renderedPosts}\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const SinglePostPage = ({ match }) => {\r\n  const { postid } = match.params;\r\n  const post = useSelector((state) =>\r\n    state.posts.find((post) => {\r\n      return post.id === postid;\r\n    })\r\n  );\r\n\r\n  const user = useSelector((state) =>\r\n    state.users.find((user) => user.id === post.user)\r\n  );\r\n  return (\r\n    <section>\r\n      {!post ? (\r\n        <h2>Post Not Found</h2>\r\n      ) : (\r\n        <article>\r\n          <h2>{post.title} </h2>\r\n          <p>created by {user?.name} </p>\r\n\r\n          <p className=\"post-content\">{post.content}</p>\r\n          <Link to={`/editPost/${post.id}`} className=\"button\">\r\n            Edit Post\r\n          </Link>\r\n        </article>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport { Navbar } from \"./app/Navbar\";\nimport { AddPostForm } from \"./features/posts/AddPostForm\";\nimport { EditPost } from \"./features/posts/EditPost\";\nimport { PostsList } from \"./features/posts/PostsList\";\nimport { SinglePostPage } from \"./features/posts/SinglePost\";\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <React.Fragment>\n                <AddPostForm />\n                <PostsList />\n              </React.Fragment>\n            )}\n          />\n          <Route exact path=\"/posts/:postid\" component={SinglePostPage} />\n          <Route exact path=\"/editPost/:postid\" component={EditPost} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { rest, setupWorker } from 'msw'\nimport { factory, oneOf, manyOf, primaryKey } from '@mswjs/data'\nimport { nanoid } from '@reduxjs/toolkit'\nimport faker from 'faker'\nimport seedrandom from 'seedrandom'\nimport { Server as MockSocketServer } from 'mock-socket'\nimport { setRandom } from 'txtgen'\n\nimport { parseISO } from 'date-fns'\n\nconst NUM_USERS = 3\nconst POSTS_PER_USER = 3\nconst RECENT_NOTIFICATIONS_DAYS = 7\n\n// Add an extra delay to all endpoints, so loading spinners show up.\nconst ARTIFICIAL_DELAY_MS = 2000\n\n/* RNG setup */\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\n/* MSW Data Model Setup */\n\nexport const db = factory({\n  user: {\n    id: primaryKey(nanoid),\n    firstName: String,\n    lastName: String,\n    name: String,\n    username: String,\n    posts: manyOf('post'),\n  },\n  post: {\n    id: primaryKey(nanoid),\n    title: String,\n    date: String,\n    content: String,\n    reactions: oneOf('reaction'),\n    comments: manyOf('comment'),\n    user: oneOf('user'),\n  },\n  comment: {\n    id: primaryKey(String),\n    date: String,\n    text: String,\n    post: oneOf('post'),\n  },\n  reaction: {\n    id: primaryKey(nanoid),\n    thumbsUp: Number,\n    hooray: Number,\n    heart: Number,\n    rocket: Number,\n    eyes: Number,\n    post: oneOf('post'),\n  },\n})\n\nconst createUserData = () => {\n  const firstName = faker.name.firstName()\n  const lastName = faker.name.lastName()\n\n  return {\n    firstName,\n    lastName,\n    name: `${firstName} ${lastName}`,\n    username: faker.internet.userName(),\n  }\n}\n\nconst createPostData = (user) => {\n  return {\n    title: faker.lorem.words(),\n    date: faker.date.recent(RECENT_NOTIFICATIONS_DAYS).toISOString(),\n    user,\n    content: faker.lorem.paragraphs(),\n    reactions: db.reaction.create(),\n  }\n}\n\n// Create an initial set of users and posts\nfor (let i = 0; i < NUM_USERS; i++) {\n  const author = db.user.create(createUserData())\n\n  for (let j = 0; j < POSTS_PER_USER; j++) {\n    const newPost = createPostData(author)\n    db.post.create(newPost)\n  }\n}\n\nconst serializePost = (post) => ({\n  ...post,\n  user: post.user.id,\n})\n\n/* MSW REST API Handlers */\n\nexport const handlers = [\n  rest.get('/fakeApi/posts', function (req, res, ctx) {\n    const posts = db.post.getAll().map(serializePost)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(posts))\n  }),\n  rest.post('/fakeApi/posts', function (req, res, ctx) {\n    const data = req.body\n\n    if (data.content === 'error') {\n      return res(\n        ctx.delay(ARTIFICIAL_DELAY_MS),\n        ctx.status(500),\n        ctx.json('Server error saving this post!')\n      )\n    }\n\n    data.date = new Date().toISOString()\n\n    const user = db.user.findFirst({ where: { id: { equals: data.user } } })\n    data.user = user\n    data.reactions = db.reaction.create()\n\n    const post = db.post.create(data)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.get('/fakeApi/posts/:postId', function (req, res, ctx) {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.patch('/fakeApi/posts/:postId', (req, res, ctx) => {\n    const { id, ...data } = req.body\n    const updatedPost = db.post.update({\n      where: { id: { equals: req.params.postId } },\n      data,\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n\n  rest.get('/fakeApi/posts/:postId/comments', (req, res, ctx) => {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json({ comments: post.comments })\n    )\n  }),\n\n  rest.post('/fakeApi/posts/:postId/reactions', (req, res, ctx) => {\n    const postId = req.params.postId\n    const reaction = req.body.reaction\n    const post = db.post.findFirst({\n      where: { id: { equals: postId } },\n    })\n\n    const updatedPost = db.post.update({\n      where: { id: { equals: postId } },\n      data: {\n        reactions: {\n          ...post.reactions,\n          [reaction]: (post.reactions[reaction] += 1),\n        },\n      },\n    })\n\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n  rest.get('/fakeApi/notifications', (req, res, ctx) => {\n    const numNotifications = getRandomInt(1, 5)\n\n    let notifications = generateRandomNotifications(\n      undefined,\n      numNotifications,\n      db\n    )\n\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(notifications))\n  }),\n  rest.get('/fakeApi/users', (req, res, ctx) => {\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(db.user.getAll()))\n  }),\n]\n\nexport const worker = setupWorker(...handlers)\n// worker.printHandlers() // Optional: nice for debugging to see all available route handlers that will be intercepted\n\n/* Mock Websocket Setup */\n\nconst socketServer = new MockSocketServer('ws://localhost')\n\nlet currentSocket\n\nconst sendMessage = (socket, obj) => {\n  socket.send(JSON.stringify(obj))\n}\n\n// Allow our UI to fake the server pushing out some notifications over the websocket,\n// as if other users were interacting with the system.\nconst sendRandomNotifications = (socket, since) => {\n  const numNotifications = getRandomInt(1, 5)\n\n  const notifications = generateRandomNotifications(since, numNotifications, db)\n\n  sendMessage(socket, { type: 'notifications', payload: notifications })\n}\n\nexport const forceGenerateNotifications = (since) => {\n  sendRandomNotifications(currentSocket, since)\n}\n\nsocketServer.on('connection', (socket) => {\n  currentSocket = socket\n\n  socket.on('message', (data) => {\n    const message = JSON.parse(data)\n\n    switch (message.type) {\n      case 'notifications': {\n        const since = message.payload\n        sendRandomNotifications(socket, since)\n        break\n      }\n      default:\n        break\n    }\n  })\n})\n\n/* Random Notifications Generation */\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nfunction generateRandomNotifications(since, numNotifications, db) {\n  const now = new Date()\n  let pastDate\n\n  if (since) {\n    pastDate = parseISO(since)\n  } else {\n    pastDate = new Date(now.valueOf())\n    pastDate.setMinutes(pastDate.getMinutes() - 15)\n  }\n\n  // Create N random notifications. We won't bother saving these\n  // in the DB - just generate a new batch and return them.\n  const notifications = [...Array(numNotifications)].map(() => {\n    const user = randomFromArray(db.user.getAll())\n    const template = randomFromArray(notificationTemplates)\n    return {\n      id: nanoid(),\n      date: faker.date.between(pastDate, now).toISOString(),\n      message: template,\n      user: user.id,\n    }\n  })\n\n  return notifications\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = [\r\n  { id: \"0\", name: \"Tianna Jenkins\" },\r\n  { id: \"1\", name: \"Kevin Grant\" },\r\n  { id: \"2\", name: \"Madison Price\" }\r\n];\r\n\r\nconst usersSlice = createSlice({\r\n  name: \"users\",\r\n  initialState,\r\n  reducers: {}\r\n});\r\n\r\nexport default usersSlice.reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport postsReducer from \"../features/posts/postsSlice\";\nimport usersReducer from \"../features/users/usersSlice\";\n\nexport default configureStore({\n  reducer: {\n    posts: postsReducer,\n    users: usersReducer\n  }\n});\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nimport { worker } from './api/server'\n\n// Wrap app rendering so we can wait for the mock API to initialize\nasync function start() {\n  // Start our mock API server\n  await worker.start({ onUnhandledRequest: 'bypass' })\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\n\nstart()\n"],"sourceRoot":""}